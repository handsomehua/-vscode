{
	
	//------------------------终端--------------------------------
	"gin安装gorm": {
		"scope": "go",
		"prefix": ":gsql",
		"body": [
			"go get -u github.com/jinzhu/gorm"
		]
	},
	//------------------------SQL--------------------------------
	"连接mysql": {
		"scope": "go",
		"prefix": ":gsql",
		"body": [
			"package main\n \n import (\n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type UserInfo struct {\n ID   uint\n Name string\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n \n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n \n //创建表 自动迁移（把结构体和数据表进行对应）\n db.AutoMigrate(&UserInfo{})\n \n //写入数据\n u1 := UserInfo{2, \"帅fdf\"}\n db.Create(&u1)\n }\n"
		]
	},
	"自动建表": {
		"scope": "go",
		"prefix": ":gsql",
		"body": [
			"package main\n \n import (\n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type UserInfo struct {\n ID   uint\n Name string\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n \n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n \n //创建表 自动迁移（把结构体和数据表进行对应）\n db.AutoMigrate(&UserInfo{})\n \n }\n"
		]
	},
	"表前缀": {
		"scope": "go",
		"prefix": ":gsql",
		"body": [
			"package main\n \n import (\n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type UserInfo struct {\n ID   uint\n Name string\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n //表前缀\n gorm.DefaultTableNameHandler = func(db *gorm.DB, defaultTableName string) string {\n return \"prefix_\" + defaultTableName\n }\n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n \n //创建表 自动迁移（把结构体和数据表进行对应）\n db.AutoMigrate(&UserInfo{})\n \n //不支持表前缀\n // db.Table(\"test\").CreateTable(&UserInfo{})\n }\n"
		]
	},
	"自动建表 表名映射^": {
		"scope": "go",
		"prefix": ":gsql",
		"body": [
			"package main\n \n import (\n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type UserInfo struct {\n ID   uint\n Name string\n }\n \n //映射表名\n func (UserInfo) TableName() string {\n return \"test\"\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n \n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n \n //创建表 自动迁移（把结构体和数据表进行对应）\n db.AutoMigrate(&UserInfo{})\n \n }\n"
		]
	},
	"自动建表 表名映射+": {
		"scope": "go",
		"prefix": ":gsql",
		"body": [
			"package main\n \n import (\n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type UserInfo struct {\n ID   uint\n Name string\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n \n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n \n // 创建表 映射表名\n db.Table(\"test_tab\").CreateTable(&UserInfo{})\n \n }\n"
		]
	},
	"打印SQL语句": {
		"scope": "go",
		"prefix": ":gsql",
		"body": [
			"db.Debug().Create(&结构体)"
		]
	},
	//------------------------字段设计--------------------------------
	"字段设计": {
		"scope": "go",
		"prefix": "-gsql",
		"body": [
		"/*\n *  映射id,created_at,updated_at,deleted_at     【gorm.Model】\n *\n *  定长100  不重复                             【字段名】【string  `gorm:\"type:varchar(100);unique_index\"`】\n *\n *  最大255                                     【字段名】 【string  `gorm:\"size:255\"`】\n *\n *  唯一 不能为空                               【字段名】 【*string `gorm:\"unique;not null\"`】\n *\n *  自动递增                                   【字段名】 【int     `gorm:\"AUTO_INCREMENT\"`】\n *\n *  字段加addr的索引                           【字段名】 【string  `gorm:\"index:addr\"`】\n *\n *  忽略本字段                                 【字段名】 【`gorm:\"-\"`】\n *\n *  datetime                                 【字段名】 【*time.Time】\n *\n *  大数字最长20                              【字段名】 【sql.NullInt64】\n *\n *  默认主键自动递增                          【ID】 【int】\n *\n *  主键自动递增                             【字段名】 【int `gorm:\"primary_key\"`】\n *\n *  重命名字段名                             【字段名】 【string `gorm:\"column:user_name\"`】\n *\n *  默认值                                  【字段名】 【string `gorm:\"default:'小舞'\"`】\n */\n"
		]
	},
	//-----------------------DB查询--------------------------------
	"where条件": {
		"scope": "go",
		"prefix": "_db_where",
		"body": [
			"/*\n *  比较               age = ?等于       age <> ?不等于       age > ?大于       age < ?小于\n *\n *  field              Select(【】string{\"age\", \"nickname\"})   【切片,字符串】\n *\n *  排序               【Order(\"id desc, name\"),Order(\"age desc\").Order(\"name\")】\n *\n *  in查询             Where(\"age IN (?)\", 【】int{12,11})\n *\n *  模糊查询           Where(\"name LIKE ?\", \"%帅%\")\n *\n *  and               Where(\"name = ? AND age >= ?\", \"jinzhu\", \"22\")\n *\n *  两个时间范围内     Where(\"created_at BETWEEN ? AND ?\", \"2021-10-10 14:00:00\", \"2021-10-10 15:00:00\")\n *\n *  结构体查询         Where(&User{Name: \"帅哥\", Age: 13})\n *\n *  Map查询           Where(map【string】interface{}{\"name\": \"帅哥\", \"age\": 13})\n *\n *  in主键查询        Where(【】int64{1, 2, 4})\n *\n *  not in主键查询    Not(【】int64{1, 3})\n *\n *  not in查询       Not(\"age\", 【】int{11, 12})   【结构体,切片】\n *\n *  or查询           Where(\"name = ?\", \"帅哥\").Or(\"age = ?\", \"12\")     【结构体,map】\n *\n * 内联条件          db.Find(&users, \"name = ?\", \"帅哥\")【and,id,结构体,map】\n *\n * 行锁             db.Set(\"gorm:query_option\", \"FOR UPDATE\").First(&users, 1)我查询的时候别人不能执行update\n *\n *limit             Limit(3)\n *\n *offset            Offset(1)\n *\n *count占位\n *\n *group占位\n *\n *join占位\n *\n *Pluck占位\n *\n *Scan扫描^      db.Table(\"users\").Select(\"name, age\").Scan(&result)   //{美女 11}\n *\n *条件拼接        tx := db.Where(\"age=?\", 11)\n *               tx = tx.Where(\"name=?\", \"帅哥\")\n *               tx.Find(&users)\n *\n *\n */\n //结构体查询 Map查询 Name:\"\" Age:0 实际不查询 解决：使用指针 或 使用 Scanner/Valuer\n /*\n *重点\n *db.Where(\"name LIKE ?\", \"jinzhu%\").Find(&users, \"id IN (?)\", []int{1, 2, 3}).Count(&count)\n *此查询Count()会复用Where条件，却不会复用Find内联条件a\n */\n"
		]
	},
	"判断是否插入成功": {
		"scope": "go",
		"prefix": "_db_NewRecord",
		"body": [
			"package main\n \n import (\n \"fmt\"\n \n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type User struct {\n ID   int64\n Name string\n Age  int64\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n \n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n \n //创建表 自动迁移（把结构体和数据表进行对应）\n db.AutoMigrate(&User{})\n \n u := User{Name: \"SG\", Age: 18}\n fmt.Println(db.NewRecord(&u)) //判断是否插入成功\n db.Create(&u)\n fmt.Println(db.NewRecord(&u)) //判断是否插入成功，成功返回false\n }\n"
		]
	},
	"查询一条数据": {
		"scope": "go",
		"prefix": "_db_First",
		"body": [
			"package main\n \n import (\n \"fmt\"\n \n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type User struct {\n gorm.Model\n Name string\n Age  int64\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n \n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n \n //创建表 自动迁移（把结构体和数据表进行对应）\n // db.AutoMigrate(&User{})\n \n //查询一条数据\n var user User\n db.First(&user, 3)\n fmt.Println(user)\n \n }\n"
		]
	},
	"查询所有数据": {
		"scope": "go",
		"prefix": "_db_Find",
		"body": [
			"package main\n \n import (\n \"fmt\"\n \n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type User struct {\n gorm.Model\n Name string\n Age  int64\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n \n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n \n //创建表 自动迁移（把结构体和数据表进行对应）\n // db.AutoMigrate(&User{})\n \n //查询多条数据\n var users []User\n db.Find(&users)\n fmt.Println(users)\n \n }\n"
		]
	},
	"没有查询到初始化一条数据": {
		"scope": "go",
		"prefix": "_db_FirstOrInit",
		"body": [
			"package main\n \n import (\n \"fmt\"\n \n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type User struct {\n gorm.Model\n Name string\n Age  int64\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n \n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n \n //创建表 自动迁移（把结构体和数据表进行对应）\n // db.AutoMigrate(&User{})\n var user User\n //没有查询到，初始化一条数据返回，并不会写入数据库\n//Assign查询到或没查询到,都会替换数据\n //Attrs没有查询到，默认给数据\n db.Attrs(User{Age: 99}).FirstOrInit(&user, User{Name: \"2s\"})\n fmt.Println(user)\n \n }\n"
		]
	},
	"查询被软删除记录": {
		"scope": "go",
		"prefix": "_db_Unscoped",
		"body": [
			"package main\n \n import (\n \"fmt\"\n \n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type User struct {\n gorm.Model\n Name     string\n Nickname string\n Age      int64\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n db.AutoMigrate(&User{})\n \n var users []User\n // Unscoped 方法可以查询被软删除的记录\n db.Unscoped().Where(\"age > ?\", 1).Find(&users)\n fmt.Println(users)\n }\n"
		]
	},
	//-----------------------DB更新--------------------------------
	"save更新": {
		"scope": "go",
		"prefix": "_db_save",
		"body": [
			"package main\n \n import (\n \"fmt\"\n \n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type User struct {\n gorm.Model\n Name     string\n Nickname string\n Age      int64\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n db.AutoMigrate(&User{})\n var user User\n db.Select(\"age,name\").Where(\"id=?\", 1).First(&user)\n //save更新\n user.Name = \"美女\"\n user.Age = 18\n db.Debug().Save(&user) // save更新默认会修改所有字段\n fmt.Println(user)\n }\n"
		]
	},
	"update更新": {
		"scope": "go",
		"prefix": "_db_update",
		"body": [
			"package main\n \n import (\n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type User struct {\n gorm.Model\n Name     string\n Nickname string\n Age      int64\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n db.AutoMigrate(&User{})\n db.Debug().Model(&User{}).Where(\"id = ?\", 1).Update(\"name\", \"妹子\")\n }\n"
		]
	},
	"map update更新": {
		"scope": "go",
		"prefix": "_db_map_update",
		"body": [
			"package main\n \n import (\n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type User struct {\n gorm.Model\n Name     string\n Nickname string\n Age      int64\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n db.AutoMigrate(&User{})\n db.Debug().Model(&User{}).Where(\"id = ?\", 1).Update(map[string]interface{}{\"name\": \"hello\", \"age\": 0})\n }\n"
		]
	},
	"struct update更新": {
		"scope": "go",
		"prefix": "_db_struct_update",
		"body": [
			"package main\n \n import (\n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type User struct {\n gorm.Model\n Name     string\n Nickname string\n Age      int64\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n db.AutoMigrate(&User{})\n db.Debug().Model(&User{}).Where(\"id = ?\", 1).Update(User{Name: \"hllsssso\", Age: 18})\n }\n"
		]
	},
	"map只更新指点字段+": {
		"scope": "go",
		"prefix": "_db_map_update",
		"body": [
			"package main\n \n import (\n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type User struct {\n gorm.Model\n Name     string\n Nickname string\n Age      int64\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n db.AutoMigrate(&User{})\n m1 := map[string]interface{}{\n \"name\":     \"帅哥\",\n \"age\":      118,\n \"nickname\": \"帅哈哈\",\n }\n //map忽悠更新字段\n db.Model(&User{}).Select(\"age\").Where(\"id = ?\", 1).Updates(m1) //只更新age字段\n }\n"
		]
	},
	"map排除更新+": {
		"scope": "go",
		"prefix": "_db_map_update",
		"body": [
			"package main\n \n import (\n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type User struct {\n gorm.Model\n Name     string\n Nickname string\n Age      int64\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n db.AutoMigrate(&User{})\n m1 := map[string]interface{}{\n \"name\":     \"帅哥\",\n \"age\":      144118,\n \"nickname\": \"帅哈哈\",\n }\n \n db.Model(&User{}).Omit(\"age\").Where(\"id = ?\", 1).Updates(m1) //排除age,不更新age\n }\n"
		]
	},
	"更新不触发钩子updated_at": {
		"scope": "go",
		"prefix": "_db_update",
		"body": [
			"package main\n \n import (\n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type User struct {\n gorm.Model\n Name     string\n Nickname string\n Age      int64\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n db.AutoMigrate(&User{})\n db.Model(&User{}).Where(\"id=?\", 4).UpdateColumn(\"age\", 30) //更新age=30，但不会触发updated_at钩子\n }\n"
		]
	},
	"结构体更新不触发钩子+": {
		"scope": "go",
		"prefix": "_db_update",
		"body": [
			"package main\n \n import (\n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type User struct {\n gorm.Model\n Name     string\n Nickname string\n Age      int64\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n db.AutoMigrate(&User{})\n db.Model(&User{}).Where(\"id=?\", 4).UpdateColumns(User{Name: \"帅哥\", Age: 34318}) //更新不触发钩子updated_at\n }\n"
		]
	},
	"返回更新行数+": {
		"scope": "go",
		"prefix": "_db_update_RowsAffected",
		"body": [
			"package main\n \n import (\n \"fmt\"\n \n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type User struct {\n gorm.Model\n Name     string\n Nickname string\n Age      int64\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n db.AutoMigrate(&User{})\n rowsNum := db.Model(&User{}).Where(\"id>?\", 1).Updates(User{Name: \"帅哥\", Age: 34318}).RowsAffected\n fmt.Println(rowsNum) //返回更新受影响的行数\n }\n"
		]
	},
	"更新所有库存基础上+2": {
		"scope": "go",
		"prefix": "_db_expr_update",
		"body": [
			"db.Model(&User{}).Update(\"age\", gorm.Expr(\"age + ?\", 2)) //在原来的基础上加2"
		]
	},

	//-----------------------DB删除--------------------------------
	"没有主键删除全部！": {
		"scope": "go",
		"prefix": "_db_delete",
		"body": [
			"package main\n \n import (\n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type User struct {\n gorm.Model\n Name     string\n Nickname string\n Age      int64\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n db.AutoMigrate(&User{})\n \n //没有主键，删除全部\n var u = User{}\n u.Name = \"帅哥\"\n db.Debug().Delete(&u)\n }\n"
		]
	},
	"按主键删除": {
		"scope": "go",
		"prefix": "_db_delete",
		"body": [
			"package main\n \n import (\n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type User struct {\n gorm.Model\n Name     string\n Nickname string\n Age      int64\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n db.AutoMigrate(&User{})\n // u := User{Name: \"SG\", Age: 18}\n // db.Create(&u)\n \n //不建议使用这种方法删除，推荐使用where=1删除\n//删除主键=21\n var u = User{}\n u.ID = 21\n db.Debug().Delete(&u)\n }\n"
		]
	},	
	"按条件删除": {
		"scope": "go",
		"prefix": "_db_delete",
		"body": [
			"package main\n \n import (\n \"github.com/jinzhu/gorm\"\n _ \"github.com/jinzhu/gorm/dialects/mysql\"\n )\n \n type User struct {\n gorm.Model\n Name     string\n Nickname string\n Age      int64\n }\n \n //链接数据库 创建表 写入数据\n func main() {\n db, err := gorm.Open(\"mysql\", \"root:root@(127.0.0.1:3306)/gin?charset=utf8mb4&parseTime=True&loc=Local\")\n if err != nil {\n panic(err)\n }\n defer db.Close()\n db.AutoMigrate(&User{})\n //条件删除\n db.Where(\"Name=?\", \"SG\").Delete(&User{})\n }\n"
		]
	},
}
